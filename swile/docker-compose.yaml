version: "3.8"

x-minio-common: &minio-common
  environment:
    MINIO_ROOT_USER: minio
    MINIO_ROOT_PASSWORD: password

services:
  minio:
    image: minio/minio:latest
    container_name: minio-container
    networks:
      - docker_network
    expose:
      - "9000"
      - "9001"
    ports:
      - 9000:9000
      - 9001:9001
    <<: *minio-common
    command: 'minio server /data --console-address ":9001"'
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      timeout: 5s
      retries: 5

  mc:
    image: minio/mc:latest
    container_name: minio-init
    <<: *minio-common
    depends_on:
      minio:
        condition: service_healthy
    restart: on-failure
    volumes:
      - ./transactions:/tmp/transactions
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set swile-minio http://minio-container:9000 $${MINIO_ROOT_USER} $${MINIO_ROOT_PASSWORD};
      /usr/bin/mc mb swile-minio/transactions;
      /usr/bin/mc anonymous set public swile-minio/transactions;
      /usr/bin/mc cp --recursive /tmp/transactions swile-minio/
      "
  postgres:
    image: postgres:16-alpine
    expose:
      - "5432"
    ports:
      - 5432:5432
    volumes:
      - ~/apps/postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=password
      - POSTGRES_USER=swile_writer_user
      - POSTGRES_DB=swile
    networks:
      - docker_network

  docker_swile_app:
    build:
      context: .
      dockerfile: ./Dockerfile
    container_name: docker_swile_app
    image: docker_swile_app_image
    restart: always
    environment:
      MINIO_HOST: minio
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: password
      POSTGRES_HOSTNAME: postgres
      DAGSTER_POSTGRES_USER: "swile_writer_user"
      DAGSTER_POSTGRES_PASSWORD: "password"
      DAGSTER_POSTGRES_DB: "swile"
      DAGSTER_CURRENT_IMAGE: "swile_app_image"
      INSEE_CONSUMER_KEY: "RRLpHph_qqLVFvW5kdSHfD0pV3Ua"
      INSEE_CONSUMER_SECRET: "GCyMzihpqXe3FEzmOxrY81rfHA4a"
      DAGSTER_DBT_PARSE_PROJECT_ON_LOAD: "1"
    expose:
      - "4000"
    ports:
      - "4000:4000"
    networks:
      - docker_network

  dagster_webserver:
    build:
      context: .
      dockerfile: ./Dockerfile_dagster
    entrypoint:
      - dagster-webserver
      - -h
      - "0.0.0.0"
      - -p
      - "3000"
      - -w
      - workspace.yaml
    container_name: dagster_webserver
    expose:
      - "3000"
    ports:
      - "3000:3000"
    environment:
      hostname: postgres
      ENV DAGSTER_DBT_PARSE_PROJECT_ON_LOAD: "1"
      DAGSTER_POSTGRES_USER: "swile_writer_user"
      DAGSTER_POSTGRES_PASSWORD: "password"
      DAGSTER_POSTGRES_DB: "swile"
    volumes: # Make docker client accessible so we can terminate containers from the webserver
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - docker_network
    depends_on:
      - postgres
      - docker_swile_app

  dagster_daemon:
    build:
      context: .
      dockerfile: ./Dockerfile_dagster
    entrypoint:
      - dagster-daemon
      - run
    container_name: dagster_daemon
    restart: on-failure
    environment:
      hostname: postgres
      DAGSTER_POSTGRES_USER: "swile_writer_user"
      DAGSTER_POSTGRES_PASSWORD: "password"
      DAGSTER_POSTGRES_DB: "swile"
    volumes: # Make docker client accessible so we can launch containers using host docker
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - docker_network
    depends_on:
      - postgres
      - docker_swile_app

networks:
  docker_network:
    driver: bridge
    name: docker_network
